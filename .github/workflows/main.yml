name: Create release

on:
  workflow_dispatch:
    inputs:
      client_version:
        description: 'Client version'
        required: true
        default: '12.0.0'
      server_version:
        description: 'Server version'
        required: true
        default: '12.0.0'

jobs:
  bump_version:
    runs-on: windows-latest
    outputs:
      # TODO: use tag from step
      version_tag: v${{ github.event.inputs.server_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      # TODO: the actual version bump, using a script (or xtask)
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
  prepare_release:
    runs-on: windows-latest
    needs: [bump_version]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Release tag is taken from the bump_version job.
          # If both client and server were bumped, format is v12.0.0, otherwise v12.0.0-server or v12.0.0-client
          tag_name: ${{ needs.bump-version.outputs.version_tag }}
          release_name: ALVR ${{ needs.bump-version.outputs.version_tag }}
          draft: true
          prerelease: false

  build_windows:
    # Windows latest has Rust, Android NDK and LLVM already installed.
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-latest
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-latest runner.
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and package ALVR (.zip, .pdb, .apk)
        run: cargo xtask publish

      # Three release asset upload actions for three assets - .zip, .pdb and .apk
      - name: Upload ALVR Windows Server .zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_windows.zip
          asset_name: alvr_server_windows.zip
          asset_content_type: application/zip
      - name: Upload ALVR Windows Server .pdb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_server_driver.pdb
          asset_name: alvr_server_driver.pdb
          asset_content_type: application/octet-stream
      - name: Upload ALVR Client .apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./build/alvr_client.apk
          asset_name: alvr_client.apk
          asset_content_type: application/vnd.android.package-archive
